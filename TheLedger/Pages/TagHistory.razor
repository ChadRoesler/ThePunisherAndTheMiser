@page "/taghistory/{resourceId}/{resourceName}/{resourceType}"

@inject ResourceService ResourceService
@inject TagTableService TableService
@inject NavigationManager Navigation

<h2>Tag History for @ResourceName</h2>

@if (tagHistory == null)
{
    <p>Loading...</p>
}
else
{
    <div class="timeline">
        @foreach (var entry in tagHistory)
        {
            <div class="timeline-item">
                <div class="timeline-date">@entry.Timestamp?.ToString("yyyy-MM-dd HH:mm")</div>
                <button @onclick="() => OpenModal(entry.Tags)">View Tags</button>
            </div>
        }
    </div>
}

@if (selectedTags != null)
{
    <div class="modal-overlay">
        <div class="modal">
            <h3>Previous Tags</h3>
            <ul>
                @foreach (var tag in selectedTags)
                {
                    <li>
                        <input type="checkbox" @bind="selectedTagKeys[tag.Key]" />
                        <strong>@tag.Key:</strong> @tag.Value
                    </li>
                }
            </ul>
            <button @onclick="RevertSelectedTags">Revert Selected</button>
            <button @onclick="CloseModal">Close</button>
        </div>
    </div>
}

<style>
    .timeline {
        display: flex;
        flex-direction: column;
        gap: 10px;
        margin-top: 20px;
    }

    .timeline-item {
        display: flex;
        align-items: center;
        gap: 10px;
    }

    .timeline-date {
        font-weight: bold;
    }

    .modal-overlay {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0, 0, 0, 0.5);
        display: flex;
        justify-content: center;
        align-items: center;
    }

    .modal {
        background: white;
        padding: 20px;
        border-radius: 5px;
    }
</style>

@code {
    [Parameter] public string ResourceId { get; set; } = string.Empty;
    [Parameter] public string ResourceName { get; set; } = string.Empty;
    [Parameter] public string ResourceType { get; set; } = string.Empty;

    private List<HistoricTagModel>? tagHistory;
    private Dictionary<string, string>? selectedTags;
    private Dictionary<string, bool> selectedTagKeys = new();

    protected override async Task OnInitializedAsync()
    {
        tagHistory = await TableService.LoadTagHistoryAsync(ResourceId, ResourceType);
    }

    private void OpenModal(Dictionary<string, string> tags)
    {
        selectedTags = new Dictionary<string, string>(tags);
        selectedTagKeys = tags.Keys.ToDictionary(key => key, key => false); // Initialize checkboxes as unchecked
    }

    private void CloseModal()
    {
        selectedTags = null;
        selectedTagKeys.Clear();
    }

    private async Task RevertSelectedTags()
    {
        var tagsToRevert = selectedTags!.Where(tag => selectedTagKeys[tag.Key]).ToDictionary(tag => tag.Key, tag => tag.Value);
        if (ResourceType == ResourceStrings.ResourceGroupTypeName)
        {
            await ResourceService.RevertResourceGroupTags(ResourceId, tagsToRevert);
        }
        else
        {
            await ResourceService.RevertResourceTags(ResourceId, tagsToRevert);
        }
        CloseModal();
    }
}
